.\" Automatically generated by Pandoc 2.1.3
.\"
.TH "PMEMPOOL-SYNC" "1" "2018-10-09" "PMDK - pmem Tools version 1.4" "PMDK Programmer's Manual"
.hy
.\" Copyright 2014-2018, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmempool\-sync\f[] \- Synchronize replicas or their parts within a
pool set.
.SH SYNOPSIS
.IP
.nf
\f[C]
pmempool\ sync\ [options]\ <poolset_file>
\f[]
.fi
.PP
NOTE: Only the pool set file used to create the pool should be used for
syncing the pool.
.SH DESCRIPTION
.PP
The \f[B]pmempool sync\f[] command synchronizes data between replicas
within a pool set.
It checks if metadata of all replicas in a pool set are consistent,
i.e.\ all parts are healthy, and if any of them is not, the corrupted or
missing parts are recreated and filled with data from one of the healthy
replicas.
Currently synchronizing data is allowed only for \f[B]pmemobj\f[] pools
(see \f[B]libpmemobj\f[](7)).
.PP
If a pool set has the option \f[I]SINGLEHDR\f[] or \f[I]NOHDRS\f[] (see
\f[B]poolset\f[](5)), \f[B]pmempool sync\f[] command has limited
capability of checking its metadata.
This is due to limited or no, respectively, internal metadata at the
beginning of pool set parts in every replica when either of the options
is used.
In that cases, only missing parts or the ones which cannot be opened are
recreated.
.SS Available options:
.TP
.B \f[C]\-b,\ \-\-bad\-blocks\f[]
Fix bad blocks \- it causes creating or reading special recovery files.
When bad blocks are detected, special recovery files have to be created
in order to fix them safely.
A separate recovery file is created per each part containing bad blocks.
The recovery files are created in the same directory where the poolset
file is located using the following name pattern: <poolset\-file\-name>
_r <replica\-number> _p <part\-number> _badblocks.txt These recovery
files are automatically removed if the sync operation finishes
successfully.
.RS
.PP
If the last sync operation was interrupted and not finished correctly
(eg.
the application crashed) and the bad blocks fixing procedure was in
progress, the bad block recovery files may be left over.
In such case bad blocks might have been cleared and zeroed, but the
correct data from these blocks was not recovered (not copied from a
healthy replica), so the recovery files MUST NOT be deleted manually,
because it would cause a data loss.
Pmempool\-sync should be run again with the `\-b' option set.
It will finish the previously interrupted sync operation and copy
correct data to zeroed bad blocks using the left\-over bad block
recovery files (the bad blocks will be read from the saved recovery
files).
Pmempool will delete the recovery files automatically at the end of the
sync operation.
.PP
Using this option may have limitations depending on the operating
system.
For details see description of the CHECK_BAD_BLOCKS feature in
\f[B]pmempool\-feature\f[](1).
.RE
.TP
.B \f[C]\-d,\ \-\-dry\-run\f[]
Enable dry run mode.
In this mode no changes are applied, only check for viability of
synchronization.
.RS
.RE
.TP
.B \f[C]\-v,\ \-\-verbose\f[]
Increase verbosity level.
.RS
.RE
.TP
.B \f[C]\-h,\ \-\-help\f[]
Display help message and exit.
.RS
.RE
.SH SEE ALSO
.PP
\f[B]pmempool(1)\f[], \f[B]libpmemblk(7)\f[], \f[B]libpmemlog(7)\f[],
\f[B]libpmempool(7)\f[] and \f[B]<http://pmem.io>\f[]
