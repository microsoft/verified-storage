/* automatically generated by rust-bindgen 0.69.4 */

pub const LIBPMEMLOG_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 38;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const LOG_DEPR_STR: &[u8; 26] = b"Libpmemlog is deprecated.\0";
pub const PMEMLOG_MAJOR_VERSION: u32 = 1;
pub const PMEMLOG_MINOR_VERSION: u32 = 1;
pub const LIBPMEM_H: u32 = 1;
pub const PMEM_FILE_CREATE: u32 = 1;
pub const PMEM_FILE_EXCL: u32 = 2;
pub const PMEM_FILE_SPARSE: u32 = 4;
pub const PMEM_FILE_TMPFILE: u32 = 8;
pub const PMEM_F_MEM_NODRAIN: u32 = 1;
pub const PMEM_F_MEM_NONTEMPORAL: u32 = 2;
pub const PMEM_F_MEM_TEMPORAL: u32 = 4;
pub const PMEM_F_MEM_WC: u32 = 8;
pub const PMEM_F_MEM_WB: u32 = 16;
pub const PMEM_F_MEM_NOFLUSH: u32 = 32;
pub const PMEM_F_MEM_VALID_FLAGS: u32 = 63;
pub const PMEM_MAJOR_VERSION: u32 = 1;
pub const PMEM_MINOR_VERSION: u32 = 1;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmemlog {
    _unused: [u8; 0],
}
pub type PMEMlogpool = pmemlog;
extern "C" {
    pub fn pmemlog_check_version(
        major_required: ::std::os::raw::c_uint,
        minor_required: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmemlog_open(path: *const ::std::os::raw::c_char) -> *mut PMEMlogpool;
}
extern "C" {
    pub fn pmemlog_create(
        path: *const ::std::os::raw::c_char,
        poolsize: usize,
        mode: mode_t,
    ) -> *mut PMEMlogpool;
}
extern "C" {
    pub fn pmemlog_check(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmemlog_close(plp: *mut PMEMlogpool);
}
extern "C" {
    pub fn pmemlog_nbyte(plp: *mut PMEMlogpool) -> usize;
}
extern "C" {
    pub fn pmemlog_append(
        plp: *mut PMEMlogpool,
        buf: *const ::std::os::raw::c_void,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmemlog_appendv(
        plp: *mut PMEMlogpool,
        iov: *const iovec,
        iovcnt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmemlog_tell(plp: *mut PMEMlogpool) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn pmemlog_rewind(plp: *mut PMEMlogpool);
}
extern "C" {
    pub fn pmemlog_walk(
        plp: *mut PMEMlogpool,
        chunksize: usize,
        process_chunk: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *const ::std::os::raw::c_void,
                len: usize,
                arg: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pmemlog_set_funcs(
        malloc_func: ::std::option::Option<
            unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void,
        >,
        free_func: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
        realloc_func: ::std::option::Option<
            unsafe extern "C" fn(
                ptr: *mut ::std::os::raw::c_void,
                size: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
        strdup_func: ::std::option::Option<
            unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        >,
    );
}
extern "C" {
    pub fn pmemlog_errormsg() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmemlog_ctl_get(
        plp: *mut PMEMlogpool,
        name: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmemlog_ctl_set(
        plp: *mut PMEMlogpool,
        name: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmemlog_ctl_exec(
        plp: *mut PMEMlogpool,
        name: *const ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_map_file(
        path: *const ::std::os::raw::c_char,
        len: usize,
        flags: ::std::os::raw::c_int,
        mode: mode_t,
        mapped_lenp: *mut usize,
        is_pmemp: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_unmap(addr: *mut ::std::os::raw::c_void, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_is_pmem(addr: *const ::std::os::raw::c_void, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_persist(addr: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn pmem_msync(addr: *const ::std::os::raw::c_void, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_has_auto_flush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_flush(addr: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn pmem_deep_flush(addr: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn pmem_deep_drain(
        addr: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_deep_persist(
        addr: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_drain();
}
extern "C" {
    pub fn pmem_has_hw_drain() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmem_memmove_persist(
        pmemdest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memcpy_persist(
        pmemdest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memset_persist(
        pmemdest: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memmove_nodrain(
        pmemdest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memcpy_nodrain(
        pmemdest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memset_nodrain(
        pmemdest: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memmove(
        pmemdest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memcpy(
        pmemdest: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_memset(
        pmemdest: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        len: usize,
        flags: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pmem_check_version(
        major_required: ::std::os::raw::c_uint,
        minor_required: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pmem_errormsg() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_backup_engine_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_backup_engine_info_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_restore_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_cache_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactionfilter_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactionfiltercontext_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactionfilterfactory_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_comparator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_dbpath_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_env_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_fifo_compaction_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_filelock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_filterpolicy_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_flushoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_iterator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_logger_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_mergeoperator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_block_based_table_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_cuckoo_table_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_randomfile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_readoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_seqfile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_slicetransform_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_snapshot_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writablefile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writebatch_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writebatch_wi_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writeoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_universal_compaction_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_livefiles_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_column_family_handle_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_envoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_ingestexternalfileoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_sstfilewriter_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_ratelimiter_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_perfcontext_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_pinnableslice_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transactiondb_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transactiondb_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transaction_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_optimistictransactiondb_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_optimistictransaction_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transaction_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_checkpoint_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_wal_iterator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_wal_readoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_memory_consumers_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_memory_usage_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rocksdb_open(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_open_with_ttl(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        ttl: ::std::os::raw::c_int,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_open_for_read_only(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        error_if_log_file_exist: ::std::os::raw::c_uchar,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_open_as_secondary(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        secondary_path: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_backup_engine_open(
        options: *const rocksdb_options_t,
        path: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_backup_engine_t;
}
extern "C" {
    pub fn rocksdb_backup_engine_create_new_backup(
        be: *mut rocksdb_backup_engine_t,
        db: *mut rocksdb_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_backup_engine_create_new_backup_flush(
        be: *mut rocksdb_backup_engine_t,
        db: *mut rocksdb_t,
        flush_before_backup: ::std::os::raw::c_uchar,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_backup_engine_purge_old_backups(
        be: *mut rocksdb_backup_engine_t,
        num_backups_to_keep: u32,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_restore_options_create() -> *mut rocksdb_restore_options_t;
}
extern "C" {
    pub fn rocksdb_restore_options_destroy(opt: *mut rocksdb_restore_options_t);
}
extern "C" {
    pub fn rocksdb_restore_options_set_keep_log_files(
        opt: *mut rocksdb_restore_options_t,
        v: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_backup_engine_verify_backup(
        be: *mut rocksdb_backup_engine_t,
        backup_id: u32,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_backup_engine_restore_db_from_latest_backup(
        be: *mut rocksdb_backup_engine_t,
        db_dir: *const ::std::os::raw::c_char,
        wal_dir: *const ::std::os::raw::c_char,
        restore_options: *const rocksdb_restore_options_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_backup_engine_get_backup_info(
        be: *mut rocksdb_backup_engine_t,
    ) -> *const rocksdb_backup_engine_info_t;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_count(
        info: *const rocksdb_backup_engine_info_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_timestamp(
        info: *const rocksdb_backup_engine_info_t,
        index: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_backup_id(
        info: *const rocksdb_backup_engine_info_t,
        index: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_size(
        info: *const rocksdb_backup_engine_info_t,
        index: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_number_files(
        info: *const rocksdb_backup_engine_info_t,
        index: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_destroy(info: *const rocksdb_backup_engine_info_t);
}
extern "C" {
    pub fn rocksdb_backup_engine_close(be: *mut rocksdb_backup_engine_t);
}
extern "C" {
    pub fn rocksdb_checkpoint_object_create(
        db: *mut rocksdb_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_checkpoint_t;
}
extern "C" {
    pub fn rocksdb_checkpoint_create(
        checkpoint: *mut rocksdb_checkpoint_t,
        checkpoint_dir: *const ::std::os::raw::c_char,
        log_size_for_flush: u64,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_checkpoint_object_destroy(checkpoint: *mut rocksdb_checkpoint_t);
}
extern "C" {
    pub fn rocksdb_open_column_families(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        num_column_families: ::std::os::raw::c_int,
        column_family_names: *const *const ::std::os::raw::c_char,
        column_family_options: *const *const rocksdb_options_t,
        column_family_handles: *mut *mut rocksdb_column_family_handle_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_open_for_read_only_column_families(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        num_column_families: ::std::os::raw::c_int,
        column_family_names: *const *const ::std::os::raw::c_char,
        column_family_options: *const *const rocksdb_options_t,
        column_family_handles: *mut *mut rocksdb_column_family_handle_t,
        error_if_log_file_exist: ::std::os::raw::c_uchar,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_open_as_secondary_column_families(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        secondary_path: *const ::std::os::raw::c_char,
        num_column_families: ::std::os::raw::c_int,
        column_family_names: *const *const ::std::os::raw::c_char,
        column_family_options: *const *const rocksdb_options_t,
        colummn_family_handles: *mut *mut rocksdb_column_family_handle_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_list_column_families(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        lencf: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_list_column_families_destroy(list: *mut *mut ::std::os::raw::c_char, len: usize);
}
extern "C" {
    pub fn rocksdb_create_column_family(
        db: *mut rocksdb_t,
        column_family_options: *const rocksdb_options_t,
        column_family_name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_column_family_handle_t;
}
extern "C" {
    pub fn rocksdb_drop_column_family(
        db: *mut rocksdb_t,
        handle: *mut rocksdb_column_family_handle_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_column_family_handle_destroy(arg1: *mut rocksdb_column_family_handle_t);
}
extern "C" {
    pub fn rocksdb_close(db: *mut rocksdb_t);
}
extern "C" {
    pub fn rocksdb_put(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_put_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_delete(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_delete_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_delete_range_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        end_key: *const ::std::os::raw::c_char,
        end_key_len: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_merge(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_merge_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_write(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        batch: *mut rocksdb_writebatch_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_get(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_get_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_multi_get(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        num_keys: usize,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        values_list: *mut *mut ::std::os::raw::c_char,
        values_list_sizes: *mut usize,
        errs: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_multi_get_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        column_families: *const *const rocksdb_column_family_handle_t,
        num_keys: usize,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        values_list: *mut *mut ::std::os::raw::c_char,
        values_list_sizes: *mut usize,
        errs: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_create_iterator(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_get_updates_since(
        db: *mut rocksdb_t,
        seq_number: u64,
        options: *const rocksdb_wal_readoptions_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_wal_iterator_t;
}
extern "C" {
    pub fn rocksdb_create_iterator_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_create_iterators(
        db: *mut rocksdb_t,
        opts: *mut rocksdb_readoptions_t,
        column_families: *mut *mut rocksdb_column_family_handle_t,
        iterators: *mut *mut rocksdb_iterator_t,
        size: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_create_snapshot(db: *mut rocksdb_t) -> *const rocksdb_snapshot_t;
}
extern "C" {
    pub fn rocksdb_release_snapshot(db: *mut rocksdb_t, snapshot: *const rocksdb_snapshot_t);
}
extern "C" {
    pub fn rocksdb_property_value(
        db: *mut rocksdb_t,
        propname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_property_int(
        db: *mut rocksdb_t,
        propname: *const ::std::os::raw::c_char,
        out_val: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_property_int_cf(
        db: *mut rocksdb_t,
        column_family: *mut rocksdb_column_family_handle_t,
        propname: *const ::std::os::raw::c_char,
        out_val: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_property_value_cf(
        db: *mut rocksdb_t,
        column_family: *mut rocksdb_column_family_handle_t,
        propname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_approximate_sizes(
        db: *mut rocksdb_t,
        num_ranges: ::std::os::raw::c_int,
        range_start_key: *const *const ::std::os::raw::c_char,
        range_start_key_len: *const usize,
        range_limit_key: *const *const ::std::os::raw::c_char,
        range_limit_key_len: *const usize,
        sizes: *mut u64,
    );
}
extern "C" {
    pub fn rocksdb_approximate_sizes_cf(
        db: *mut rocksdb_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_ranges: ::std::os::raw::c_int,
        range_start_key: *const *const ::std::os::raw::c_char,
        range_start_key_len: *const usize,
        range_limit_key: *const *const ::std::os::raw::c_char,
        range_limit_key_len: *const usize,
        sizes: *mut u64,
    );
}
extern "C" {
    pub fn rocksdb_compact_range(
        db: *mut rocksdb_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        limit_key: *const ::std::os::raw::c_char,
        limit_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_compact_range_cf(
        db: *mut rocksdb_t,
        column_family: *mut rocksdb_column_family_handle_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        limit_key: *const ::std::os::raw::c_char,
        limit_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_compact_range_opt(
        db: *mut rocksdb_t,
        opt: *mut rocksdb_compactoptions_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        limit_key: *const ::std::os::raw::c_char,
        limit_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_compact_range_cf_opt(
        db: *mut rocksdb_t,
        column_family: *mut rocksdb_column_family_handle_t,
        opt: *mut rocksdb_compactoptions_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        limit_key: *const ::std::os::raw::c_char,
        limit_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_delete_file(db: *mut rocksdb_t, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn rocksdb_livefiles(db: *mut rocksdb_t) -> *const rocksdb_livefiles_t;
}
extern "C" {
    pub fn rocksdb_flush(
        db: *mut rocksdb_t,
        options: *const rocksdb_flushoptions_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_flush_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_flushoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_disable_file_deletions(
        db: *mut rocksdb_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_enable_file_deletions(
        db: *mut rocksdb_t,
        force: ::std::os::raw::c_uchar,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_destroy_db(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_repair_db(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_iter_destroy(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_valid(arg1: *const rocksdb_iterator_t) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_iter_seek_to_first(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_seek_to_last(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_seek(
        arg1: *mut rocksdb_iterator_t,
        k: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_iter_seek_for_prev(
        arg1: *mut rocksdb_iterator_t,
        k: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_iter_next(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_prev(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_key(
        arg1: *const rocksdb_iterator_t,
        klen: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_iter_value(
        arg1: *const rocksdb_iterator_t,
        vlen: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_iter_get_error(
        arg1: *const rocksdb_iterator_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_wal_iter_next(iter: *mut rocksdb_wal_iterator_t);
}
extern "C" {
    pub fn rocksdb_wal_iter_valid(arg1: *const rocksdb_wal_iterator_t) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_wal_iter_status(
        iter: *const rocksdb_wal_iterator_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_wal_iter_get_batch(
        iter: *const rocksdb_wal_iterator_t,
        seq: *mut u64,
    ) -> *mut rocksdb_writebatch_t;
}
extern "C" {
    pub fn rocksdb_get_latest_sequence_number(db: *mut rocksdb_t) -> u64;
}
extern "C" {
    pub fn rocksdb_wal_iter_destroy(iter: *const rocksdb_wal_iterator_t);
}
extern "C" {
    pub fn rocksdb_writebatch_create() -> *mut rocksdb_writebatch_t;
}
extern "C" {
    pub fn rocksdb_writebatch_create_from(
        rep: *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut rocksdb_writebatch_t;
}
extern "C" {
    pub fn rocksdb_writebatch_destroy(arg1: *mut rocksdb_writebatch_t);
}
extern "C" {
    pub fn rocksdb_writebatch_clear(arg1: *mut rocksdb_writebatch_t);
}
extern "C" {
    pub fn rocksdb_writebatch_count(arg1: *mut rocksdb_writebatch_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_writebatch_put(
        arg1: *mut rocksdb_writebatch_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_put_cf(
        arg1: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_putv(
        b: *mut rocksdb_writebatch_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_putv_cf(
        b: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_merge(
        arg1: *mut rocksdb_writebatch_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_merge_cf(
        arg1: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_mergev(
        b: *mut rocksdb_writebatch_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_mergev_cf(
        b: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_delete(
        arg1: *mut rocksdb_writebatch_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_singledelete(
        b: *mut rocksdb_writebatch_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_delete_cf(
        arg1: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_singledelete_cf(
        b: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_deletev(
        b: *mut rocksdb_writebatch_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_deletev_cf(
        b: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_delete_range(
        b: *mut rocksdb_writebatch_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        end_key: *const ::std::os::raw::c_char,
        end_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_delete_range_cf(
        b: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        end_key: *const ::std::os::raw::c_char,
        end_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_delete_rangev(
        b: *mut rocksdb_writebatch_t,
        num_keys: ::std::os::raw::c_int,
        start_keys_list: *const *const ::std::os::raw::c_char,
        start_keys_list_sizes: *const usize,
        end_keys_list: *const *const ::std::os::raw::c_char,
        end_keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_delete_rangev_cf(
        b: *mut rocksdb_writebatch_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        start_keys_list: *const *const ::std::os::raw::c_char,
        start_keys_list_sizes: *const usize,
        end_keys_list: *const *const ::std::os::raw::c_char,
        end_keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_put_log_data(
        arg1: *mut rocksdb_writebatch_t,
        blob: *const ::std::os::raw::c_char,
        len: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_iterate(
        arg1: *mut rocksdb_writebatch_t,
        state: *mut ::std::os::raw::c_void,
        put: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                k: *const ::std::os::raw::c_char,
                klen: usize,
                v: *const ::std::os::raw::c_char,
                vlen: usize,
            ),
        >,
        deleted: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                k: *const ::std::os::raw::c_char,
                klen: usize,
            ),
        >,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_data(
        arg1: *mut rocksdb_writebatch_t,
        size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_set_save_point(arg1: *mut rocksdb_writebatch_t);
}
extern "C" {
    pub fn rocksdb_writebatch_rollback_to_save_point(
        arg1: *mut rocksdb_writebatch_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_pop_save_point(
        arg1: *mut rocksdb_writebatch_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create(
        reserved_bytes: usize,
        overwrite_keys: ::std::os::raw::c_uchar,
    ) -> *mut rocksdb_writebatch_wi_t;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create_from(
        rep: *const ::std::os::raw::c_char,
        size: usize,
    ) -> *mut rocksdb_writebatch_wi_t;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_destroy(arg1: *mut rocksdb_writebatch_wi_t);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_clear(arg1: *mut rocksdb_writebatch_wi_t);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_count(b: *mut rocksdb_writebatch_wi_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_put(
        arg1: *mut rocksdb_writebatch_wi_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_put_cf(
        arg1: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_putv(
        b: *mut rocksdb_writebatch_wi_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_putv_cf(
        b: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_merge(
        arg1: *mut rocksdb_writebatch_wi_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_merge_cf(
        arg1: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_mergev(
        b: *mut rocksdb_writebatch_wi_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_mergev_cf(
        b: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
        num_values: ::std::os::raw::c_int,
        values_list: *const *const ::std::os::raw::c_char,
        values_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete(
        arg1: *mut rocksdb_writebatch_wi_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_singledelete(
        arg1: *mut rocksdb_writebatch_wi_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_cf(
        arg1: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_singledelete_cf(
        arg1: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_deletev(
        b: *mut rocksdb_writebatch_wi_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_deletev_cf(
        b: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        keys_list: *const *const ::std::os::raw::c_char,
        keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_range(
        b: *mut rocksdb_writebatch_wi_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        end_key: *const ::std::os::raw::c_char,
        end_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_range_cf(
        b: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        end_key: *const ::std::os::raw::c_char,
        end_key_len: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_rangev(
        b: *mut rocksdb_writebatch_wi_t,
        num_keys: ::std::os::raw::c_int,
        start_keys_list: *const *const ::std::os::raw::c_char,
        start_keys_list_sizes: *const usize,
        end_keys_list: *const *const ::std::os::raw::c_char,
        end_keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_rangev_cf(
        b: *mut rocksdb_writebatch_wi_t,
        column_family: *mut rocksdb_column_family_handle_t,
        num_keys: ::std::os::raw::c_int,
        start_keys_list: *const *const ::std::os::raw::c_char,
        start_keys_list_sizes: *const usize,
        end_keys_list: *const *const ::std::os::raw::c_char,
        end_keys_list_sizes: *const usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_put_log_data(
        arg1: *mut rocksdb_writebatch_wi_t,
        blob: *const ::std::os::raw::c_char,
        len: usize,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_iterate(
        b: *mut rocksdb_writebatch_wi_t,
        state: *mut ::std::os::raw::c_void,
        put: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                k: *const ::std::os::raw::c_char,
                klen: usize,
                v: *const ::std::os::raw::c_char,
                vlen: usize,
            ),
        >,
        deleted: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                k: *const ::std::os::raw::c_char,
                klen: usize,
            ),
        >,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_data(
        b: *mut rocksdb_writebatch_wi_t,
        size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_set_save_point(arg1: *mut rocksdb_writebatch_wi_t);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_rollback_to_save_point(
        arg1: *mut rocksdb_writebatch_wi_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch(
        wbwi: *mut rocksdb_writebatch_wi_t,
        options: *const rocksdb_options_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch_cf(
        wbwi: *mut rocksdb_writebatch_wi_t,
        options: *const rocksdb_options_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch_and_db(
        wbwi: *mut rocksdb_writebatch_wi_t,
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch_and_db_cf(
        wbwi: *mut rocksdb_writebatch_wi_t,
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_write_writebatch_wi(
        db: *mut rocksdb_t,
        options: *const rocksdb_writeoptions_t,
        wbwi: *mut rocksdb_writebatch_wi_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create_iterator_with_base(
        wbwi: *mut rocksdb_writebatch_wi_t,
        base_iterator: *mut rocksdb_iterator_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create_iterator_with_base_cf(
        wbwi: *mut rocksdb_writebatch_wi_t,
        base_iterator: *mut rocksdb_iterator_t,
        cf: *mut rocksdb_column_family_handle_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_block_based_options_create() -> *mut rocksdb_block_based_table_options_t;
}
extern "C" {
    pub fn rocksdb_block_based_options_destroy(options: *mut rocksdb_block_based_table_options_t);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_size(
        options: *mut rocksdb_block_based_table_options_t,
        block_size: usize,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_size_deviation(
        options: *mut rocksdb_block_based_table_options_t,
        block_size_deviation: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_restart_interval(
        options: *mut rocksdb_block_based_table_options_t,
        block_restart_interval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_index_block_restart_interval(
        options: *mut rocksdb_block_based_table_options_t,
        index_block_restart_interval: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_metadata_block_size(
        options: *mut rocksdb_block_based_table_options_t,
        metadata_block_size: u64,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_partition_filters(
        options: *mut rocksdb_block_based_table_options_t,
        partition_filters: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_use_delta_encoding(
        options: *mut rocksdb_block_based_table_options_t,
        use_delta_encoding: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_filter_policy(
        options: *mut rocksdb_block_based_table_options_t,
        filter_policy: *mut rocksdb_filterpolicy_t,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_no_block_cache(
        options: *mut rocksdb_block_based_table_options_t,
        no_block_cache: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_cache(
        options: *mut rocksdb_block_based_table_options_t,
        block_cache: *mut rocksdb_cache_t,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_cache_compressed(
        options: *mut rocksdb_block_based_table_options_t,
        block_cache_compressed: *mut rocksdb_cache_t,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_whole_key_filtering(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_format_version(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
pub const rocksdb_block_based_table_index_type_binary_search: _bindgen_ty_1 = 0;
pub const rocksdb_block_based_table_index_type_hash_search: _bindgen_ty_1 = 1;
pub const rocksdb_block_based_table_index_type_two_level_index_search: _bindgen_ty_1 = 2;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn rocksdb_block_based_options_set_index_type(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
pub const rocksdb_block_based_table_data_block_index_type_binary_search: _bindgen_ty_2 = 0;
pub const rocksdb_block_based_table_data_block_index_type_binary_search_and_hash: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub fn rocksdb_block_based_options_set_data_block_index_type(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_data_block_hash_ratio(
        options: *mut rocksdb_block_based_table_options_t,
        v: f64,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_hash_index_allow_collision(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_cache_index_and_filter_blocks(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_cache_index_and_filter_blocks_with_high_priority(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_pin_l0_filter_and_index_blocks_in_cache(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_block_based_options_set_pin_top_level_index_and_filter(
        arg1: *mut rocksdb_block_based_table_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_block_based_table_factory(
        opt: *mut rocksdb_options_t,
        table_options: *mut rocksdb_block_based_table_options_t,
    );
}
extern "C" {
    pub fn rocksdb_cuckoo_options_create() -> *mut rocksdb_cuckoo_table_options_t;
}
extern "C" {
    pub fn rocksdb_cuckoo_options_destroy(options: *mut rocksdb_cuckoo_table_options_t);
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_hash_ratio(
        options: *mut rocksdb_cuckoo_table_options_t,
        v: f64,
    );
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_max_search_depth(
        options: *mut rocksdb_cuckoo_table_options_t,
        v: u32,
    );
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_cuckoo_block_size(
        options: *mut rocksdb_cuckoo_table_options_t,
        v: u32,
    );
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_identity_as_first_hash(
        options: *mut rocksdb_cuckoo_table_options_t,
        v: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_use_module_hash(
        options: *mut rocksdb_cuckoo_table_options_t,
        v: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_cuckoo_table_factory(
        opt: *mut rocksdb_options_t,
        table_options: *mut rocksdb_cuckoo_table_options_t,
    );
}
extern "C" {
    pub fn rocksdb_set_options(
        db: *mut rocksdb_t,
        count: ::std::os::raw::c_int,
        keys: *const *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_set_options_cf(
        db: *mut rocksdb_t,
        handle: *mut rocksdb_column_family_handle_t,
        count: ::std::os::raw::c_int,
        keys: *const *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_options_create() -> *mut rocksdb_options_t;
}
extern "C" {
    pub fn rocksdb_options_destroy(arg1: *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_create_copy(arg1: *mut rocksdb_options_t) -> *mut rocksdb_options_t;
}
extern "C" {
    pub fn rocksdb_options_increase_parallelism(
        opt: *mut rocksdb_options_t,
        total_threads: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_optimize_for_point_lookup(
        opt: *mut rocksdb_options_t,
        block_cache_size_mb: u64,
    );
}
extern "C" {
    pub fn rocksdb_options_optimize_level_style_compaction(
        opt: *mut rocksdb_options_t,
        memtable_memory_budget: u64,
    );
}
extern "C" {
    pub fn rocksdb_options_optimize_universal_style_compaction(
        opt: *mut rocksdb_options_t,
        memtable_memory_budget: u64,
    );
}
extern "C" {
    pub fn rocksdb_options_set_allow_ingest_behind(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_allow_ingest_behind(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_compaction_filter(
        arg1: *mut rocksdb_options_t,
        arg2: *mut rocksdb_compactionfilter_t,
    );
}
extern "C" {
    pub fn rocksdb_options_set_compaction_filter_factory(
        arg1: *mut rocksdb_options_t,
        arg2: *mut rocksdb_compactionfilterfactory_t,
    );
}
extern "C" {
    pub fn rocksdb_options_compaction_readahead_size(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_get_compaction_readahead_size(arg1: *mut rocksdb_options_t) -> usize;
}
extern "C" {
    pub fn rocksdb_options_set_comparator(
        arg1: *mut rocksdb_options_t,
        arg2: *mut rocksdb_comparator_t,
    );
}
extern "C" {
    pub fn rocksdb_options_set_merge_operator(
        arg1: *mut rocksdb_options_t,
        arg2: *mut rocksdb_mergeoperator_t,
    );
}
extern "C" {
    pub fn rocksdb_options_set_uint64add_merge_operator(arg1: *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_compression_per_level(
        opt: *mut rocksdb_options_t,
        level_values: *mut ::std::os::raw::c_int,
        num_levels: usize,
    );
}
extern "C" {
    pub fn rocksdb_options_set_create_if_missing(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_create_if_missing(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_create_missing_column_families(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_create_missing_column_families(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_error_if_exists(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_error_if_exists(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_paranoid_checks(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_paranoid_checks(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_db_paths(
        arg1: *mut rocksdb_options_t,
        path_values: *mut *const rocksdb_dbpath_t,
        num_paths: usize,
    );
}
extern "C" {
    pub fn rocksdb_options_set_env(arg1: *mut rocksdb_options_t, arg2: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_options_set_info_log(arg1: *mut rocksdb_options_t, arg2: *mut rocksdb_logger_t);
}
extern "C" {
    pub fn rocksdb_options_set_info_log_level(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_info_log_level(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_write_buffer_size(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_get_write_buffer_size(arg1: *mut rocksdb_options_t) -> usize;
}
extern "C" {
    pub fn rocksdb_options_set_db_write_buffer_size(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_get_db_write_buffer_size(arg1: *mut rocksdb_options_t) -> usize;
}
extern "C" {
    pub fn rocksdb_options_set_max_open_files(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_max_open_files(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_max_file_opening_threads(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_max_file_opening_threads(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_max_total_wal_size(opt: *mut rocksdb_options_t, n: u64);
}
extern "C" {
    pub fn rocksdb_options_get_max_total_wal_size(opt: *mut rocksdb_options_t) -> u64;
}
extern "C" {
    pub fn rocksdb_options_set_compression_options(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_compression_options_zstd_max_train_bytes(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_bottommost_compression_options(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_bottommost_compression_options_zstd_max_train_bytes(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_prefix_extractor(
        arg1: *mut rocksdb_options_t,
        arg2: *mut rocksdb_slicetransform_t,
    );
}
extern "C" {
    pub fn rocksdb_options_set_num_levels(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_num_levels(arg1: *mut rocksdb_options_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_level0_file_num_compaction_trigger(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_level0_file_num_compaction_trigger(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_level0_slowdown_writes_trigger(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_level0_slowdown_writes_trigger(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_level0_stop_writes_trigger(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_level0_stop_writes_trigger(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_max_mem_compaction_level(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_target_file_size_base(arg1: *mut rocksdb_options_t, arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_get_target_file_size_base(arg1: *mut rocksdb_options_t) -> u64;
}
extern "C" {
    pub fn rocksdb_options_set_target_file_size_multiplier(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_target_file_size_multiplier(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_max_bytes_for_level_base(arg1: *mut rocksdb_options_t, arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_get_max_bytes_for_level_base(arg1: *mut rocksdb_options_t) -> u64;
}
extern "C" {
    pub fn rocksdb_options_set_level_compaction_dynamic_level_bytes(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_level_compaction_dynamic_level_bytes(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_max_bytes_for_level_multiplier(
        arg1: *mut rocksdb_options_t,
        arg2: f64,
    );
}
extern "C" {
    pub fn rocksdb_options_get_max_bytes_for_level_multiplier(arg1: *mut rocksdb_options_t) -> f64;
}
extern "C" {
    pub fn rocksdb_options_set_max_bytes_for_level_multiplier_additional(
        arg1: *mut rocksdb_options_t,
        level_values: *mut ::std::os::raw::c_int,
        num_levels: usize,
    );
}
extern "C" {
    pub fn rocksdb_options_enable_statistics(arg1: *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_skip_stats_update_on_db_open(
        opt: *mut rocksdb_options_t,
        val: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_skip_stats_update_on_db_open(
        opt: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_skip_checking_sst_file_sizes_on_db_open(
        opt: *mut rocksdb_options_t,
        val: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_skip_checking_sst_file_sizes_on_db_open(
        opt: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_statistics_get_string(
        opt: *mut rocksdb_options_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_options_set_max_write_buffer_number(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_max_write_buffer_number(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_min_write_buffer_number_to_merge(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_min_write_buffer_number_to_merge(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_max_write_buffer_number_to_maintain(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_get_max_write_buffer_number_to_maintain(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_options_set_max_write_buffer_size_to_maintain(
        arg1: *mut rocksdb_options_t,
        arg2: i64,
    );
}
extern "C" {
    pub fn rocksdb_options_get_max_write_buffer_size_to_maintain(
        arg1: *mut rocksdb_options_t,
    ) -> i64;
}
extern "C" {
    pub fn rocksdb_options_set_enable_pipelined_write(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_enable_pipelined_write(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_unordered_write(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_get_unordered_write(
        arg1: *mut rocksdb_options_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_options_set_max_subcompactions(arg1: *mut rocksdb_options_t, arg2: u32);
}
extern "C" {
    pub fn rocksdb_options_get_max_subcompactions(arg1: *mut rocksdb_options_t) -> u32;
}
extern "C" {
    pub fn rocksdb_options_set_max_background_jobs(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_max_background_compactions(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_base_background_compactions(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_max_background_flushes(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_max_log_file_size(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_log_file_time_to_roll(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_keep_log_file_num(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_recycle_log_file_num(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_soft_rate_limit(arg1: *mut rocksdb_options_t, arg2: f64);
}
extern "C" {
    pub fn rocksdb_options_set_hard_rate_limit(arg1: *mut rocksdb_options_t, arg2: f64);
}
extern "C" {
    pub fn rocksdb_options_set_soft_pending_compaction_bytes_limit(
        opt: *mut rocksdb_options_t,
        v: usize,
    );
}
extern "C" {
    pub fn rocksdb_options_set_hard_pending_compaction_bytes_limit(
        opt: *mut rocksdb_options_t,
        v: usize,
    );
}
extern "C" {
    pub fn rocksdb_options_set_rate_limit_delay_max_milliseconds(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rocksdb_options_set_max_manifest_file_size(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_table_cache_numshardbits(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_table_cache_remove_scan_count_limit(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_arena_block_size(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_use_fsync(arg1: *mut rocksdb_options_t, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_db_log_dir(
        arg1: *mut rocksdb_options_t,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_options_set_wal_dir(
        arg1: *mut rocksdb_options_t,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_options_set_WAL_ttl_seconds(arg1: *mut rocksdb_options_t, arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_WAL_size_limit_MB(arg1: *mut rocksdb_options_t, arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_manifest_preallocation_size(
        arg1: *mut rocksdb_options_t,
        arg2: usize,
    );
}
extern "C" {
    pub fn rocksdb_options_set_purge_redundant_kvs_while_flush(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_allow_mmap_reads(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_allow_mmap_writes(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_use_direct_reads(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_use_direct_io_for_flush_and_compaction(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_is_fd_close_on_exec(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_skip_log_error_on_recovery(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_stats_dump_period_sec(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rocksdb_options_set_advise_random_on_open(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_access_hint_on_compaction_start(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_use_adaptive_mutex(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_bytes_per_sync(arg1: *mut rocksdb_options_t, arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_wal_bytes_per_sync(arg1: *mut rocksdb_options_t, arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_writable_file_max_buffer_size(
        arg1: *mut rocksdb_options_t,
        arg2: u64,
    );
}
extern "C" {
    pub fn rocksdb_options_set_allow_concurrent_memtable_write(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_enable_write_thread_adaptive_yield(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_max_sequential_skip_in_iterations(
        arg1: *mut rocksdb_options_t,
        arg2: u64,
    );
}
extern "C" {
    pub fn rocksdb_options_set_disable_auto_compactions(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_optimize_filters_for_hits(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_delete_obsolete_files_period_micros(
        arg1: *mut rocksdb_options_t,
        arg2: u64,
    );
}
extern "C" {
    pub fn rocksdb_options_prepare_for_bulk_load(arg1: *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_memtable_vector_rep(arg1: *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_memtable_prefix_bloom_size_ratio(
        arg1: *mut rocksdb_options_t,
        arg2: f64,
    );
}
extern "C" {
    pub fn rocksdb_options_set_max_compaction_bytes(arg1: *mut rocksdb_options_t, arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_hash_skip_list_rep(
        arg1: *mut rocksdb_options_t,
        arg2: usize,
        arg3: i32,
        arg4: i32,
    );
}
extern "C" {
    pub fn rocksdb_options_set_hash_link_list_rep(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_plain_table_factory(
        arg1: *mut rocksdb_options_t,
        arg2: u32,
        arg3: ::std::os::raw::c_int,
        arg4: f64,
        arg5: usize,
    );
}
extern "C" {
    pub fn rocksdb_options_set_min_level_to_compress(
        opt: *mut rocksdb_options_t,
        level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_memtable_huge_page_size(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_max_successive_merges(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_bloom_locality(arg1: *mut rocksdb_options_t, arg2: u32);
}
extern "C" {
    pub fn rocksdb_options_set_inplace_update_support(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_inplace_update_num_locks(arg1: *mut rocksdb_options_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_report_bg_io_stats(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
pub const rocksdb_tolerate_corrupted_tail_records_recovery: _bindgen_ty_3 = 0;
pub const rocksdb_absolute_consistency_recovery: _bindgen_ty_3 = 1;
pub const rocksdb_point_in_time_recovery: _bindgen_ty_3 = 2;
pub const rocksdb_skip_any_corrupted_records_recovery: _bindgen_ty_3 = 3;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn rocksdb_options_set_wal_recovery_mode(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
pub const rocksdb_no_compression: _bindgen_ty_4 = 0;
pub const rocksdb_snappy_compression: _bindgen_ty_4 = 1;
pub const rocksdb_zlib_compression: _bindgen_ty_4 = 2;
pub const rocksdb_bz2_compression: _bindgen_ty_4 = 3;
pub const rocksdb_lz4_compression: _bindgen_ty_4 = 4;
pub const rocksdb_lz4hc_compression: _bindgen_ty_4 = 5;
pub const rocksdb_xpress_compression: _bindgen_ty_4 = 6;
pub const rocksdb_zstd_compression: _bindgen_ty_4 = 7;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    pub fn rocksdb_options_set_compression(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_bottommost_compression(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
pub const rocksdb_level_compaction: _bindgen_ty_5 = 0;
pub const rocksdb_universal_compaction: _bindgen_ty_5 = 1;
pub const rocksdb_fifo_compaction: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
extern "C" {
    pub fn rocksdb_options_set_compaction_style(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_options_set_universal_compaction_options(
        arg1: *mut rocksdb_options_t,
        arg2: *mut rocksdb_universal_compaction_options_t,
    );
}
extern "C" {
    pub fn rocksdb_options_set_fifo_compaction_options(
        opt: *mut rocksdb_options_t,
        fifo: *mut rocksdb_fifo_compaction_options_t,
    );
}
extern "C" {
    pub fn rocksdb_options_set_ratelimiter(
        opt: *mut rocksdb_options_t,
        limiter: *mut rocksdb_ratelimiter_t,
    );
}
extern "C" {
    pub fn rocksdb_options_set_atomic_flush(
        opt: *mut rocksdb_options_t,
        arg1: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_row_cache(opt: *mut rocksdb_options_t, cache: *mut rocksdb_cache_t);
}
extern "C" {
    pub fn rocksdb_ratelimiter_create(
        rate_bytes_per_sec: i64,
        refill_period_us: i64,
        fairness: i32,
    ) -> *mut rocksdb_ratelimiter_t;
}
extern "C" {
    pub fn rocksdb_ratelimiter_destroy(arg1: *mut rocksdb_ratelimiter_t);
}
pub const rocksdb_uninitialized: _bindgen_ty_6 = 0;
pub const rocksdb_disable: _bindgen_ty_6 = 1;
pub const rocksdb_enable_count: _bindgen_ty_6 = 2;
pub const rocksdb_enable_time_except_for_mutex: _bindgen_ty_6 = 3;
pub const rocksdb_enable_time: _bindgen_ty_6 = 4;
pub const rocksdb_out_of_bounds: _bindgen_ty_6 = 5;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const rocksdb_user_key_comparison_count: _bindgen_ty_7 = 0;
pub const rocksdb_block_cache_hit_count: _bindgen_ty_7 = 1;
pub const rocksdb_block_read_count: _bindgen_ty_7 = 2;
pub const rocksdb_block_read_byte: _bindgen_ty_7 = 3;
pub const rocksdb_block_read_time: _bindgen_ty_7 = 4;
pub const rocksdb_block_checksum_time: _bindgen_ty_7 = 5;
pub const rocksdb_block_decompress_time: _bindgen_ty_7 = 6;
pub const rocksdb_get_read_bytes: _bindgen_ty_7 = 7;
pub const rocksdb_multiget_read_bytes: _bindgen_ty_7 = 8;
pub const rocksdb_iter_read_bytes: _bindgen_ty_7 = 9;
pub const rocksdb_internal_key_skipped_count: _bindgen_ty_7 = 10;
pub const rocksdb_internal_delete_skipped_count: _bindgen_ty_7 = 11;
pub const rocksdb_internal_recent_skipped_count: _bindgen_ty_7 = 12;
pub const rocksdb_internal_merge_count: _bindgen_ty_7 = 13;
pub const rocksdb_get_snapshot_time: _bindgen_ty_7 = 14;
pub const rocksdb_get_from_memtable_time: _bindgen_ty_7 = 15;
pub const rocksdb_get_from_memtable_count: _bindgen_ty_7 = 16;
pub const rocksdb_get_post_process_time: _bindgen_ty_7 = 17;
pub const rocksdb_get_from_output_files_time: _bindgen_ty_7 = 18;
pub const rocksdb_seek_on_memtable_time: _bindgen_ty_7 = 19;
pub const rocksdb_seek_on_memtable_count: _bindgen_ty_7 = 20;
pub const rocksdb_next_on_memtable_count: _bindgen_ty_7 = 21;
pub const rocksdb_prev_on_memtable_count: _bindgen_ty_7 = 22;
pub const rocksdb_seek_child_seek_time: _bindgen_ty_7 = 23;
pub const rocksdb_seek_child_seek_count: _bindgen_ty_7 = 24;
pub const rocksdb_seek_min_heap_time: _bindgen_ty_7 = 25;
pub const rocksdb_seek_max_heap_time: _bindgen_ty_7 = 26;
pub const rocksdb_seek_internal_seek_time: _bindgen_ty_7 = 27;
pub const rocksdb_find_next_user_entry_time: _bindgen_ty_7 = 28;
pub const rocksdb_write_wal_time: _bindgen_ty_7 = 29;
pub const rocksdb_write_memtable_time: _bindgen_ty_7 = 30;
pub const rocksdb_write_delay_time: _bindgen_ty_7 = 31;
pub const rocksdb_write_pre_and_post_process_time: _bindgen_ty_7 = 32;
pub const rocksdb_db_mutex_lock_nanos: _bindgen_ty_7 = 33;
pub const rocksdb_db_condition_wait_nanos: _bindgen_ty_7 = 34;
pub const rocksdb_merge_operator_time_nanos: _bindgen_ty_7 = 35;
pub const rocksdb_read_index_block_nanos: _bindgen_ty_7 = 36;
pub const rocksdb_read_filter_block_nanos: _bindgen_ty_7 = 37;
pub const rocksdb_new_table_block_iter_nanos: _bindgen_ty_7 = 38;
pub const rocksdb_new_table_iterator_nanos: _bindgen_ty_7 = 39;
pub const rocksdb_block_seek_nanos: _bindgen_ty_7 = 40;
pub const rocksdb_find_table_nanos: _bindgen_ty_7 = 41;
pub const rocksdb_bloom_memtable_hit_count: _bindgen_ty_7 = 42;
pub const rocksdb_bloom_memtable_miss_count: _bindgen_ty_7 = 43;
pub const rocksdb_bloom_sst_hit_count: _bindgen_ty_7 = 44;
pub const rocksdb_bloom_sst_miss_count: _bindgen_ty_7 = 45;
pub const rocksdb_key_lock_wait_time: _bindgen_ty_7 = 46;
pub const rocksdb_key_lock_wait_count: _bindgen_ty_7 = 47;
pub const rocksdb_env_new_sequential_file_nanos: _bindgen_ty_7 = 48;
pub const rocksdb_env_new_random_access_file_nanos: _bindgen_ty_7 = 49;
pub const rocksdb_env_new_writable_file_nanos: _bindgen_ty_7 = 50;
pub const rocksdb_env_reuse_writable_file_nanos: _bindgen_ty_7 = 51;
pub const rocksdb_env_new_random_rw_file_nanos: _bindgen_ty_7 = 52;
pub const rocksdb_env_new_directory_nanos: _bindgen_ty_7 = 53;
pub const rocksdb_env_file_exists_nanos: _bindgen_ty_7 = 54;
pub const rocksdb_env_get_children_nanos: _bindgen_ty_7 = 55;
pub const rocksdb_env_get_children_file_attributes_nanos: _bindgen_ty_7 = 56;
pub const rocksdb_env_delete_file_nanos: _bindgen_ty_7 = 57;
pub const rocksdb_env_create_dir_nanos: _bindgen_ty_7 = 58;
pub const rocksdb_env_create_dir_if_missing_nanos: _bindgen_ty_7 = 59;
pub const rocksdb_env_delete_dir_nanos: _bindgen_ty_7 = 60;
pub const rocksdb_env_get_file_size_nanos: _bindgen_ty_7 = 61;
pub const rocksdb_env_get_file_modification_time_nanos: _bindgen_ty_7 = 62;
pub const rocksdb_env_rename_file_nanos: _bindgen_ty_7 = 63;
pub const rocksdb_env_link_file_nanos: _bindgen_ty_7 = 64;
pub const rocksdb_env_lock_file_nanos: _bindgen_ty_7 = 65;
pub const rocksdb_env_unlock_file_nanos: _bindgen_ty_7 = 66;
pub const rocksdb_env_new_logger_nanos: _bindgen_ty_7 = 67;
pub const rocksdb_total_metric_count: _bindgen_ty_7 = 68;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
extern "C" {
    pub fn rocksdb_set_perf_level(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rocksdb_perfcontext_create() -> *mut rocksdb_perfcontext_t;
}
extern "C" {
    pub fn rocksdb_perfcontext_reset(context: *mut rocksdb_perfcontext_t);
}
extern "C" {
    pub fn rocksdb_perfcontext_report(
        context: *mut rocksdb_perfcontext_t,
        exclude_zero_counters: ::std::os::raw::c_uchar,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_perfcontext_metric(
        context: *mut rocksdb_perfcontext_t,
        metric: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_perfcontext_destroy(context: *mut rocksdb_perfcontext_t);
}
extern "C" {
    pub fn rocksdb_compactionfilter_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        filter: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                level: ::std::os::raw::c_int,
                key: *const ::std::os::raw::c_char,
                key_length: usize,
                existing_value: *const ::std::os::raw::c_char,
                value_length: usize,
                new_value: *mut *mut ::std::os::raw::c_char,
                new_value_length: *mut usize,
                value_changed: *mut ::std::os::raw::c_uchar,
            ) -> ::std::os::raw::c_uchar,
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut rocksdb_compactionfilter_t;
}
extern "C" {
    pub fn rocksdb_compactionfilter_set_ignore_snapshots(
        arg1: *mut rocksdb_compactionfilter_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_compactionfilter_destroy(arg1: *mut rocksdb_compactionfilter_t);
}
extern "C" {
    pub fn rocksdb_compactionfiltercontext_is_full_compaction(
        context: *mut rocksdb_compactionfiltercontext_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_compactionfiltercontext_is_manual_compaction(
        context: *mut rocksdb_compactionfiltercontext_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn rocksdb_compactionfilterfactory_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        create_compaction_filter: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                context: *mut rocksdb_compactionfiltercontext_t,
            ) -> *mut rocksdb_compactionfilter_t,
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut rocksdb_compactionfilterfactory_t;
}
extern "C" {
    pub fn rocksdb_compactionfilterfactory_destroy(arg1: *mut rocksdb_compactionfilterfactory_t);
}
extern "C" {
    pub fn rocksdb_comparator_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                a: *const ::std::os::raw::c_char,
                alen: usize,
                b: *const ::std::os::raw::c_char,
                blen: usize,
            ) -> ::std::os::raw::c_int,
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut rocksdb_comparator_t;
}
extern "C" {
    pub fn rocksdb_comparator_destroy(arg1: *mut rocksdb_comparator_t);
}
extern "C" {
    pub fn rocksdb_filterpolicy_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        create_filter: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key_array: *const *const ::std::os::raw::c_char,
                key_length_array: *const usize,
                num_keys: ::std::os::raw::c_int,
                filter_length: *mut usize,
            ) -> *mut ::std::os::raw::c_char,
        >,
        key_may_match: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key: *const ::std::os::raw::c_char,
                length: usize,
                filter: *const ::std::os::raw::c_char,
                filter_length: usize,
            ) -> ::std::os::raw::c_uchar,
        >,
        delete_filter: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                filter: *const ::std::os::raw::c_char,
                filter_length: usize,
            ),
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut rocksdb_filterpolicy_t;
}
extern "C" {
    pub fn rocksdb_filterpolicy_destroy(arg1: *mut rocksdb_filterpolicy_t);
}
extern "C" {
    pub fn rocksdb_filterpolicy_create_bloom(
        bits_per_key: ::std::os::raw::c_int,
    ) -> *mut rocksdb_filterpolicy_t;
}
extern "C" {
    pub fn rocksdb_filterpolicy_create_bloom_full(
        bits_per_key: ::std::os::raw::c_int,
    ) -> *mut rocksdb_filterpolicy_t;
}
extern "C" {
    pub fn rocksdb_mergeoperator_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        full_merge: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key: *const ::std::os::raw::c_char,
                key_length: usize,
                existing_value: *const ::std::os::raw::c_char,
                existing_value_length: usize,
                operands_list: *const *const ::std::os::raw::c_char,
                operands_list_length: *const usize,
                num_operands: ::std::os::raw::c_int,
                success: *mut ::std::os::raw::c_uchar,
                new_value_length: *mut usize,
            ) -> *mut ::std::os::raw::c_char,
        >,
        partial_merge: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key: *const ::std::os::raw::c_char,
                key_length: usize,
                operands_list: *const *const ::std::os::raw::c_char,
                operands_list_length: *const usize,
                num_operands: ::std::os::raw::c_int,
                success: *mut ::std::os::raw::c_uchar,
                new_value_length: *mut usize,
            ) -> *mut ::std::os::raw::c_char,
        >,
        delete_value: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                value: *const ::std::os::raw::c_char,
                value_length: usize,
            ),
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut rocksdb_mergeoperator_t;
}
extern "C" {
    pub fn rocksdb_mergeoperator_destroy(arg1: *mut rocksdb_mergeoperator_t);
}
extern "C" {
    pub fn rocksdb_readoptions_create() -> *mut rocksdb_readoptions_t;
}
extern "C" {
    pub fn rocksdb_readoptions_destroy(arg1: *mut rocksdb_readoptions_t);
}
extern "C" {
    pub fn rocksdb_readoptions_set_verify_checksums(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_fill_cache(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_snapshot(
        arg1: *mut rocksdb_readoptions_t,
        arg2: *const rocksdb_snapshot_t,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_iterate_upper_bound(
        arg1: *mut rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_iterate_lower_bound(
        arg1: *mut rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_read_tier(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_tailing(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_managed(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_readahead_size(arg1: *mut rocksdb_readoptions_t, arg2: usize);
}
extern "C" {
    pub fn rocksdb_readoptions_set_prefix_same_as_start(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_pin_data(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_total_order_seek(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_max_skippable_internal_keys(
        arg1: *mut rocksdb_readoptions_t,
        arg2: u64,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_background_purge_on_iterator_cleanup(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_readoptions_set_ignore_range_deletions(
        arg1: *mut rocksdb_readoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_writeoptions_create() -> *mut rocksdb_writeoptions_t;
}
extern "C" {
    pub fn rocksdb_writeoptions_destroy(arg1: *mut rocksdb_writeoptions_t);
}
extern "C" {
    pub fn rocksdb_writeoptions_set_sync(
        arg1: *mut rocksdb_writeoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_writeoptions_disable_WAL(
        opt: *mut rocksdb_writeoptions_t,
        disable: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_writeoptions_set_ignore_missing_column_families(
        arg1: *mut rocksdb_writeoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_writeoptions_set_no_slowdown(
        arg1: *mut rocksdb_writeoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_writeoptions_set_low_pri(
        arg1: *mut rocksdb_writeoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_writeoptions_set_memtable_insert_hint_per_batch(
        arg1: *mut rocksdb_writeoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_compactoptions_create() -> *mut rocksdb_compactoptions_t;
}
extern "C" {
    pub fn rocksdb_compactoptions_destroy(arg1: *mut rocksdb_compactoptions_t);
}
extern "C" {
    pub fn rocksdb_compactoptions_set_exclusive_manual_compaction(
        arg1: *mut rocksdb_compactoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_compactoptions_set_bottommost_level_compaction(
        arg1: *mut rocksdb_compactoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_compactoptions_set_change_level(
        arg1: *mut rocksdb_compactoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_compactoptions_set_target_level(
        arg1: *mut rocksdb_compactoptions_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_flushoptions_create() -> *mut rocksdb_flushoptions_t;
}
extern "C" {
    pub fn rocksdb_flushoptions_destroy(arg1: *mut rocksdb_flushoptions_t);
}
extern "C" {
    pub fn rocksdb_flushoptions_set_wait(
        arg1: *mut rocksdb_flushoptions_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_cache_create_lru(capacity: usize) -> *mut rocksdb_cache_t;
}
extern "C" {
    pub fn rocksdb_cache_destroy(cache: *mut rocksdb_cache_t);
}
extern "C" {
    pub fn rocksdb_cache_set_capacity(cache: *mut rocksdb_cache_t, capacity: usize);
}
extern "C" {
    pub fn rocksdb_cache_get_usage(cache: *mut rocksdb_cache_t) -> usize;
}
extern "C" {
    pub fn rocksdb_cache_get_pinned_usage(cache: *mut rocksdb_cache_t) -> usize;
}
extern "C" {
    pub fn rocksdb_dbpath_create(
        path: *const ::std::os::raw::c_char,
        target_size: u64,
    ) -> *mut rocksdb_dbpath_t;
}
extern "C" {
    pub fn rocksdb_dbpath_destroy(arg1: *mut rocksdb_dbpath_t);
}
extern "C" {
    pub fn rocksdb_create_default_env() -> *mut rocksdb_env_t;
}
extern "C" {
    pub fn rocksdb_create_mem_env() -> *mut rocksdb_env_t;
}
extern "C" {
    pub fn rocksdb_env_set_background_threads(env: *mut rocksdb_env_t, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rocksdb_env_set_high_priority_background_threads(
        env: *mut rocksdb_env_t,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_env_join_all_threads(env: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_env_lower_thread_pool_io_priority(env: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_env_lower_high_priority_thread_pool_io_priority(env: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_env_lower_thread_pool_cpu_priority(env: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_env_lower_high_priority_thread_pool_cpu_priority(env: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_env_destroy(arg1: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_envoptions_create() -> *mut rocksdb_envoptions_t;
}
extern "C" {
    pub fn rocksdb_envoptions_destroy(opt: *mut rocksdb_envoptions_t);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_create(
        env: *const rocksdb_envoptions_t,
        io_options: *const rocksdb_options_t,
    ) -> *mut rocksdb_sstfilewriter_t;
}
extern "C" {
    pub fn rocksdb_sstfilewriter_create_with_comparator(
        env: *const rocksdb_envoptions_t,
        io_options: *const rocksdb_options_t,
        comparator: *const rocksdb_comparator_t,
    ) -> *mut rocksdb_sstfilewriter_t;
}
extern "C" {
    pub fn rocksdb_sstfilewriter_open(
        writer: *mut rocksdb_sstfilewriter_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_sstfilewriter_add(
        writer: *mut rocksdb_sstfilewriter_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_sstfilewriter_put(
        writer: *mut rocksdb_sstfilewriter_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_sstfilewriter_merge(
        writer: *mut rocksdb_sstfilewriter_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_sstfilewriter_delete(
        writer: *mut rocksdb_sstfilewriter_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_sstfilewriter_finish(
        writer: *mut rocksdb_sstfilewriter_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_sstfilewriter_file_size(
        writer: *mut rocksdb_sstfilewriter_t,
        file_size: *mut u64,
    );
}
extern "C" {
    pub fn rocksdb_sstfilewriter_destroy(writer: *mut rocksdb_sstfilewriter_t);
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_create() -> *mut rocksdb_ingestexternalfileoptions_t;
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_move_files(
        opt: *mut rocksdb_ingestexternalfileoptions_t,
        move_files: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_snapshot_consistency(
        opt: *mut rocksdb_ingestexternalfileoptions_t,
        snapshot_consistency: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_allow_global_seqno(
        opt: *mut rocksdb_ingestexternalfileoptions_t,
        allow_global_seqno: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_allow_blocking_flush(
        opt: *mut rocksdb_ingestexternalfileoptions_t,
        allow_blocking_flush: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_ingest_behind(
        opt: *mut rocksdb_ingestexternalfileoptions_t,
        ingest_behind: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_destroy(opt: *mut rocksdb_ingestexternalfileoptions_t);
}
extern "C" {
    pub fn rocksdb_ingest_external_file(
        db: *mut rocksdb_t,
        file_list: *const *const ::std::os::raw::c_char,
        list_len: usize,
        opt: *const rocksdb_ingestexternalfileoptions_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_ingest_external_file_cf(
        db: *mut rocksdb_t,
        handle: *mut rocksdb_column_family_handle_t,
        file_list: *const *const ::std::os::raw::c_char,
        list_len: usize,
        opt: *const rocksdb_ingestexternalfileoptions_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_try_catch_up_with_primary(
        db: *mut rocksdb_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_slicetransform_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        transform: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key: *const ::std::os::raw::c_char,
                length: usize,
                dst_length: *mut usize,
            ) -> *mut ::std::os::raw::c_char,
        >,
        in_domain: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key: *const ::std::os::raw::c_char,
                length: usize,
            ) -> ::std::os::raw::c_uchar,
        >,
        in_range: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key: *const ::std::os::raw::c_char,
                length: usize,
            ) -> ::std::os::raw::c_uchar,
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut rocksdb_slicetransform_t;
}
extern "C" {
    pub fn rocksdb_slicetransform_create_fixed_prefix(arg1: usize)
        -> *mut rocksdb_slicetransform_t;
}
extern "C" {
    pub fn rocksdb_slicetransform_create_noop() -> *mut rocksdb_slicetransform_t;
}
extern "C" {
    pub fn rocksdb_slicetransform_destroy(arg1: *mut rocksdb_slicetransform_t);
}
pub const rocksdb_similar_size_compaction_stop_style: _bindgen_ty_8 = 0;
pub const rocksdb_total_size_compaction_stop_style: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
extern "C" {
    pub fn rocksdb_universal_compaction_options_create(
    ) -> *mut rocksdb_universal_compaction_options_t;
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_size_ratio(
        arg1: *mut rocksdb_universal_compaction_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_min_merge_width(
        arg1: *mut rocksdb_universal_compaction_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_max_merge_width(
        arg1: *mut rocksdb_universal_compaction_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_max_size_amplification_percent(
        arg1: *mut rocksdb_universal_compaction_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_compression_size_percent(
        arg1: *mut rocksdb_universal_compaction_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_stop_style(
        arg1: *mut rocksdb_universal_compaction_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_destroy(
        arg1: *mut rocksdb_universal_compaction_options_t,
    );
}
extern "C" {
    pub fn rocksdb_fifo_compaction_options_create() -> *mut rocksdb_fifo_compaction_options_t;
}
extern "C" {
    pub fn rocksdb_fifo_compaction_options_set_max_table_files_size(
        fifo_opts: *mut rocksdb_fifo_compaction_options_t,
        size: u64,
    );
}
extern "C" {
    pub fn rocksdb_fifo_compaction_options_destroy(
        fifo_opts: *mut rocksdb_fifo_compaction_options_t,
    );
}
extern "C" {
    pub fn rocksdb_livefiles_count(arg1: *const rocksdb_livefiles_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_livefiles_name(
        arg1: *const rocksdb_livefiles_t,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_livefiles_level(
        arg1: *const rocksdb_livefiles_t,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rocksdb_livefiles_size(
        arg1: *const rocksdb_livefiles_t,
        index: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn rocksdb_livefiles_smallestkey(
        arg1: *const rocksdb_livefiles_t,
        index: ::std::os::raw::c_int,
        size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_livefiles_largestkey(
        arg1: *const rocksdb_livefiles_t,
        index: ::std::os::raw::c_int,
        size: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_livefiles_entries(
        arg1: *const rocksdb_livefiles_t,
        index: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_livefiles_deletions(
        arg1: *const rocksdb_livefiles_t,
        index: ::std::os::raw::c_int,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_livefiles_destroy(arg1: *const rocksdb_livefiles_t);
}
extern "C" {
    pub fn rocksdb_get_options_from_string(
        base_options: *const rocksdb_options_t,
        opts_str: *const ::std::os::raw::c_char,
        new_options: *mut rocksdb_options_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_delete_file_in_range(
        db: *mut rocksdb_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        limit_key: *const ::std::os::raw::c_char,
        limit_key_len: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_delete_file_in_range_cf(
        db: *mut rocksdb_t,
        column_family: *mut rocksdb_column_family_handle_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        limit_key: *const ::std::os::raw::c_char,
        limit_key_len: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_create_column_family(
        txn_db: *mut rocksdb_transactiondb_t,
        column_family_options: *const rocksdb_options_t,
        column_family_name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_column_family_handle_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_open(
        options: *const rocksdb_options_t,
        txn_db_options: *const rocksdb_transactiondb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_transactiondb_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_open_column_families(
        options: *const rocksdb_options_t,
        txn_db_options: *const rocksdb_transactiondb_options_t,
        name: *const ::std::os::raw::c_char,
        num_column_families: ::std::os::raw::c_int,
        column_family_names: *const *const ::std::os::raw::c_char,
        column_family_options: *const *const rocksdb_options_t,
        column_family_handles: *mut *mut rocksdb_column_family_handle_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_transactiondb_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_create_snapshot(
        txn_db: *mut rocksdb_transactiondb_t,
    ) -> *const rocksdb_snapshot_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_release_snapshot(
        txn_db: *mut rocksdb_transactiondb_t,
        snapshot: *const rocksdb_snapshot_t,
    );
}
extern "C" {
    pub fn rocksdb_transaction_begin(
        txn_db: *mut rocksdb_transactiondb_t,
        write_options: *const rocksdb_writeoptions_t,
        txn_options: *const rocksdb_transaction_options_t,
        old_txn: *mut rocksdb_transaction_t,
    ) -> *mut rocksdb_transaction_t;
}
extern "C" {
    pub fn rocksdb_transaction_commit(
        txn: *mut rocksdb_transaction_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_rollback(
        txn: *mut rocksdb_transaction_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_set_savepoint(txn: *mut rocksdb_transaction_t);
}
extern "C" {
    pub fn rocksdb_transaction_rollback_to_savepoint(
        txn: *mut rocksdb_transaction_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_destroy(txn: *mut rocksdb_transaction_t);
}
extern "C" {
    pub fn rocksdb_transaction_get_snapshot(
        txn: *mut rocksdb_transaction_t,
    ) -> *const rocksdb_snapshot_t;
}
extern "C" {
    pub fn rocksdb_transaction_get(
        txn: *mut rocksdb_transaction_t,
        options: *const rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        vlen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_transaction_get_cf(
        txn: *mut rocksdb_transaction_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        vlen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_transaction_get_for_update(
        txn: *mut rocksdb_transaction_t,
        options: *const rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        vlen: *mut usize,
        exclusive: ::std::os::raw::c_uchar,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_transaction_get_for_update_cf(
        txn: *mut rocksdb_transaction_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        vlen: *mut usize,
        exclusive: ::std::os::raw::c_uchar,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_transactiondb_get(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        vlen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_transactiondb_get_cf(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_transaction_put(
        txn: *mut rocksdb_transaction_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_put_cf(
        txn: *mut rocksdb_transaction_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_put(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_put_cf(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_writeoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_write(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_writeoptions_t,
        batch: *mut rocksdb_writebatch_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_merge(
        txn: *mut rocksdb_transaction_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_merge_cf(
        txn: *mut rocksdb_transaction_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_merge(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_merge_cf(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_writeoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_delete(
        txn: *mut rocksdb_transaction_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_delete_cf(
        txn: *mut rocksdb_transaction_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_delete(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_delete_cf(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_writeoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rocksdb_transaction_create_iterator(
        txn: *mut rocksdb_transaction_t,
        options: *const rocksdb_readoptions_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_transaction_create_iterator_cf(
        txn: *mut rocksdb_transaction_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_create_iterator(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_readoptions_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_create_iterator_cf(
        txn_db: *mut rocksdb_transactiondb_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
    ) -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_close(txn_db: *mut rocksdb_transactiondb_t);
}
extern "C" {
    pub fn rocksdb_transactiondb_checkpoint_object_create(
        txn_db: *mut rocksdb_transactiondb_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_checkpoint_t;
}
extern "C" {
    pub fn rocksdb_optimistictransactiondb_open(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_optimistictransactiondb_t;
}
extern "C" {
    pub fn rocksdb_optimistictransactiondb_open_column_families(
        options: *const rocksdb_options_t,
        name: *const ::std::os::raw::c_char,
        num_column_families: ::std::os::raw::c_int,
        column_family_names: *const *const ::std::os::raw::c_char,
        column_family_options: *const *const rocksdb_options_t,
        column_family_handles: *mut *mut rocksdb_column_family_handle_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_optimistictransactiondb_t;
}
extern "C" {
    pub fn rocksdb_optimistictransactiondb_get_base_db(
        otxn_db: *mut rocksdb_optimistictransactiondb_t,
    ) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_optimistictransactiondb_close_base_db(base_db: *mut rocksdb_t);
}
extern "C" {
    pub fn rocksdb_optimistictransaction_begin(
        otxn_db: *mut rocksdb_optimistictransactiondb_t,
        write_options: *const rocksdb_writeoptions_t,
        otxn_options: *const rocksdb_optimistictransaction_options_t,
        old_txn: *mut rocksdb_transaction_t,
    ) -> *mut rocksdb_transaction_t;
}
extern "C" {
    pub fn rocksdb_optimistictransactiondb_close(otxn_db: *mut rocksdb_optimistictransactiondb_t);
}
extern "C" {
    pub fn rocksdb_transactiondb_options_create() -> *mut rocksdb_transactiondb_options_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_options_destroy(opt: *mut rocksdb_transactiondb_options_t);
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_max_num_locks(
        opt: *mut rocksdb_transactiondb_options_t,
        max_num_locks: i64,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_num_stripes(
        opt: *mut rocksdb_transactiondb_options_t,
        num_stripes: usize,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_transaction_lock_timeout(
        opt: *mut rocksdb_transactiondb_options_t,
        txn_lock_timeout: i64,
    );
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_default_lock_timeout(
        opt: *mut rocksdb_transactiondb_options_t,
        default_lock_timeout: i64,
    );
}
extern "C" {
    pub fn rocksdb_transaction_options_create() -> *mut rocksdb_transaction_options_t;
}
extern "C" {
    pub fn rocksdb_transaction_options_destroy(opt: *mut rocksdb_transaction_options_t);
}
extern "C" {
    pub fn rocksdb_transaction_options_set_set_snapshot(
        opt: *mut rocksdb_transaction_options_t,
        v: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_transaction_options_set_deadlock_detect(
        opt: *mut rocksdb_transaction_options_t,
        v: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_transaction_options_set_lock_timeout(
        opt: *mut rocksdb_transaction_options_t,
        lock_timeout: i64,
    );
}
extern "C" {
    pub fn rocksdb_transaction_options_set_expiration(
        opt: *mut rocksdb_transaction_options_t,
        expiration: i64,
    );
}
extern "C" {
    pub fn rocksdb_transaction_options_set_deadlock_detect_depth(
        opt: *mut rocksdb_transaction_options_t,
        depth: i64,
    );
}
extern "C" {
    pub fn rocksdb_transaction_options_set_max_write_batch_size(
        opt: *mut rocksdb_transaction_options_t,
        size: usize,
    );
}
extern "C" {
    pub fn rocksdb_optimistictransaction_options_create(
    ) -> *mut rocksdb_optimistictransaction_options_t;
}
extern "C" {
    pub fn rocksdb_optimistictransaction_options_destroy(
        opt: *mut rocksdb_optimistictransaction_options_t,
    );
}
extern "C" {
    pub fn rocksdb_optimistictransaction_options_set_set_snapshot(
        opt: *mut rocksdb_optimistictransaction_options_t,
        v: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rocksdb_get_pinned(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_pinnableslice_t;
}
extern "C" {
    pub fn rocksdb_get_pinned_cf(
        db: *mut rocksdb_t,
        options: *const rocksdb_readoptions_t,
        column_family: *mut rocksdb_column_family_handle_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_pinnableslice_t;
}
extern "C" {
    pub fn rocksdb_pinnableslice_destroy(v: *mut rocksdb_pinnableslice_t);
}
extern "C" {
    pub fn rocksdb_pinnableslice_value(
        t: *const rocksdb_pinnableslice_t,
        vlen: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rocksdb_memory_consumers_create() -> *mut rocksdb_memory_consumers_t;
}
extern "C" {
    pub fn rocksdb_memory_consumers_add_db(
        consumers: *mut rocksdb_memory_consumers_t,
        db: *mut rocksdb_t,
    );
}
extern "C" {
    pub fn rocksdb_memory_consumers_add_cache(
        consumers: *mut rocksdb_memory_consumers_t,
        cache: *mut rocksdb_cache_t,
    );
}
extern "C" {
    pub fn rocksdb_memory_consumers_destroy(consumers: *mut rocksdb_memory_consumers_t);
}
extern "C" {
    pub fn rocksdb_approximate_memory_usage_create(
        consumers: *mut rocksdb_memory_consumers_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut rocksdb_memory_usage_t;
}
extern "C" {
    pub fn rocksdb_approximate_memory_usage_destroy(usage: *mut rocksdb_memory_usage_t);
}
extern "C" {
    pub fn rocksdb_approximate_memory_usage_get_mem_table_total(
        memory_usage: *mut rocksdb_memory_usage_t,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_approximate_memory_usage_get_mem_table_unflushed(
        memory_usage: *mut rocksdb_memory_usage_t,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_approximate_memory_usage_get_mem_table_readers_total(
        memory_usage: *mut rocksdb_memory_usage_t,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_approximate_memory_usage_get_cache_total(
        memory_usage: *mut rocksdb_memory_usage_t,
    ) -> u64;
}
extern "C" {
    pub fn rocksdb_options_set_dump_malloc_stats(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_options_set_memtable_whole_key_filtering(
        arg1: *mut rocksdb_options_t,
        arg2: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn rocksdb_cancel_all_background_work(db: *mut rocksdb_t, wait: ::std::os::raw::c_uchar);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
