# initially generated by claude.ai

import os
import numpy as np
import matplotlib.pyplot as plt
from statistics import mean, stdev
from pathlib import Path
import argparse
import sys
import csv

def process_workload_file(file_path):
    """Process a single workload file and return the values."""
    with open(file_path, 'r') as f:
        return [int(line.strip()) for line in f if line.strip()]

def process_workload_directory(workload_dir):
    """Process all files in a workload directory and return mean and std dev."""
    print("Processing directory", workload_dir)
    values = []
    
    # Process all files in the directory
    for filename in os.listdir(workload_dir):
        file_path = os.path.join(workload_dir, filename)
        if os.path.isfile(file_path):
            try:
                file_values = process_workload_file(file_path)
                values.extend(file_values)
            except (ValueError, IOError) as e:
                print(f"Warning: Couldn't process file {file_path}: {str(e)}")
                continue
    
    if not values:
        print(f"Warning: No valid data found in directory {workload_dir}")
        return 0, 0

    return mean(values), stdev(values) if len(values) > 1 else 0

def analyze_kvstore_data(base_dir):
    """Analyze data from all KV stores and their workloads."""
    if not os.path.exists(base_dir):
        print(f"Error: Directory '{base_dir}' does not exist")
        sys.exit(1)
        
    results = {}
    
    # Process each KV store directory
    for kvstore in os.listdir(base_dir):
        kvstore_path = os.path.join(base_dir, kvstore)
        if not os.path.isdir(kvstore_path):
            continue
            
        results[kvstore] = {}
        
        # Process each workload in the KV store directory
        for workload in os.listdir(kvstore_path):
            workload_path = os.path.join(kvstore_path, workload)
            if not os.path.isdir(workload_path):
                continue
                
            mean_val, std_val = process_workload_directory(workload_path)
            results[kvstore][workload] = (mean_val, std_val)
    
    if not results:
        print(f"Error: No valid data found in directory '{base_dir}'")
        sys.exit(1)
        
    return results

def save_results_to_csv(results, output_file):
    """Save the results to a CSV file."""
    # Get all unique workload names across all KV stores
    workloads = sorted(set(
        workload
        for kvstore_data in results.values()
        for workload in kvstore_data.keys()
    ))
    
    # Prepare the CSV data
    rows = []
    
    # Header row
    header = ['KV_Store', 'Workload', 'Mean', 'Std_Dev']
    rows.append(header)
    
    # Data rows
    for kvstore in sorted(results.keys()):
        for workload in workloads:
            if workload in results[kvstore]:
                mean_val, std_val = results[kvstore][workload]
                rows.append([kvstore, workload, mean_val, std_val])
    
    # Write to CSV
    with open(output_file, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerows(rows)
    
    print(f"Results saved to CSV: '{output_file}'")

def plot_results(results, output_file='results.pdf'):
    """Create a bar plot with error bars from the results."""
    kvstores = list(results.keys())
    workloads = list(results[kvstores[0]].keys())
    
    # Set up the plot
    plt.figure(figsize=(12, 6))
    x = np.arange(len(workloads))
    width = 0.8 / len(kvstores)
    
    # Plot bars for each KV store
    for i, kvstore in enumerate(kvstores):
        means = [results[kvstore][w][0] for w in workloads]
        stds = [results[kvstore][w][1] for w in workloads]
        
        plt.bar(x + i*width - width*len(kvstores)/2 + width/2, 
                means,
                width,
                label=kvstore,
                yerr=stds,
                capsize=5)
    
    plt.xlabel('Workloads')
    plt.ylabel('Average Value')
    plt.title('Key-Value Store Performance by Workload')
    plt.xticks(x, workloads, rotation=45)
    plt.legend()
    plt.tight_layout()
    
    # Save the plot
    plt.savefig(output_file)
    print(f"Plot saved as '{output_file}'")
    plt.close()

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description='Process and visualize key-value store workload data',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('base_dir', 
                       help='Base directory containing KV store data')
    parser.add_argument('-o', '--output',
                       default='results.pdf',
                       help='Output PDF file name')
    parser.add_argument('-c', '--csv',
                       default='results.csv',
                       help='Output CSV file name')
    return parser.parse_args()

def main():
    # Parse command line arguments
    args = parse_arguments()
    
    # Process the data
    results = analyze_kvstore_data(args.base_dir)
    
    # Save results to CSV
    save_results_to_csv(results, args.csv)
    
    # Create the visualization
    plot_results(results, args.output)

if __name__ == "__main__":
    main()